// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enum for Colleges
enum College {
  CAS
  CBM
  COC
  COD
  COE
  CICT
  COL
  COM
  CON
  PESCAR
}

// Enum for Admin Roles
enum AdminRole {
  SUPER_ADMIN
  AUDITOR
  MODERATOR
}

model Student {
  id         String  @id @default(cuid())
  firstName  String
  lastName   String
  middleName String? // Optional middle name
  email      String  @unique // firstname.lastname@wvsu.edu.ph format
  password   String? // Will store hashed password
  college    College
  // enrollmentDate DateTime  @default(now())
  hasVoted   Boolean @default(false) // Track voting status

  // Fields for sign-up & verification
  isPreApproved       Boolean   @default(true) // Indicates if they are in the "enrolled" list
  emailVerified       DateTime? // Timestamp when email was verified during sign-up
  verificationToken   String? // Stores the OTP or verification token
  verificationExpires DateTime? // Expiry for the verification token

  // Fields for Password Reset
  passwordResetToken   String?
  passwordResetExpires DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relation for next-auth adapter (optional but potentially useful later)
  // accounts       Account[]
  // sessions       Session[]
}

model Admin {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String // Will store hashed password
  role      AdminRole
  college   College? // Nullable, only set for MODERATOR role

  // Fields for Password Reset
  passwordResetToken  String?
  passwordResetExpires DateTime?
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relation for next-auth adapter (optional but potentially useful later)
  // accounts  Account[]
  // sessions  Session[]

  // Ensure a moderator always has a college assigned
  @@index([role, college]) // Index for faster lookups maybe
  @@map("admins") // Map to 'admins' table name
}

// --- NextAuth.js Prisma Adapter Models ---
// Needed if you use the database session strategy or link accounts (OAuth)
// For Credentials-only with JWT sessions, these might not be strictly required
// But it's good practice to include them for flexibility

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // Decide if Admins and Students share the same Account/Session tables
  // Option 1: Separate User types (more complex adapter setup)
  // Option 2: A single User table (requires merging Student/Admin or a generic User)
  // Option 3 (Simpler for now): Don't link accounts directly here for Credentials
  // user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  // user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// If using email provider or a unified User model:
// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
