// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enum for Colleges
enum College {
  CAS
  CBM
  COC
  COD
  COE
  CICT
  COL
  COM
  CON
  PESCAR
}

// Enum for Admin Roles
enum AdminRole {
  SUPER_ADMIN
  AUDITOR
  MODERATOR
}

enum ElectionStatus {
  UPCOMING
  ONGOING
  PAUSED // Admin can pause the entire event
  ENDED // General end, or explicitly ended by admin
  ARCHIVED
}

enum ElectionScopeType {
  USC
  CSC
}

model Election {
  id          String         @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ElectionStatus @default(UPCOMING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  scopeType ElectionScopeType? // Indicates if this election is primarily for USC or CSC
  college   College? // If scopeType is CSC, which college is it for?

  extensions ElectionExtension[]
  positions  Position[] // Relation to Positions
  partylists Partylist[] // Relation to Partylists
  candidates Candidate[] // Relation to Candidates

  StudentElectionVote StudentElectionVote[]
  SubmittedBallot     SubmittedBallot[]
  VoteCast            VoteCast[]
}

model ElectionExtension {
  id              String   @id @default(cuid())
  electionId      String
  election        Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
  college         College
  extendedEndDate DateTime
  reason          String?
  createdAt       DateTime @default(now())

  @@unique([electionId, college])
}

model Student {
  id         String  @id @default(cuid())
  firstName  String
  lastName   String
  middleName String? // Optional middle name
  email      String  @unique // firstname.lastname@wvsu.edu.ph format
  password   String? // Will store hashed password
  college    College
  // Fields for sign-up & verification
  isPreApproved       Boolean   @default(true) // Indicates if they are in the "enrolled" list
  emailVerified       DateTime? // Timestamp when email was verified during sign-up
  verificationToken   String? // Stores the OTP or verification token
  verificationExpires DateTime? // Expiry for the verification token

  // Fields for Password Reset
  passwordResetToken   String?
  passwordResetExpires DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  StudentElectionVote StudentElectionVote[]
  SubmittedBallot     SubmittedBallot[]
}

model Admin {
  id       String    @id @default(cuid())
  email    String    @unique
  password String // Will store hashed password
  role     AdminRole
  college  College? // Nullable, only set for MODERATOR role

  // Fields for Password Reset
  passwordResetToken   String?
  passwordResetExpires DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensure a moderator always has a college assigned
  @@index([role, college]) // Index for faster lookups maybe
  @@map("admins") // Map to 'admins' table name
}

enum PositionType {
  USC
  CSC
}

model Position {
  id               String       @id @default(cuid())
  name             String // e.g., "Chairperson", "Vice Chairperson", "Councilor", "CICT Governor"
  description      String?
  type             PositionType // USC or CSC
  college          College? // Required if type is CSC, null if USC
  maxVotesAllowed  Int // Max number of candidates a voter can select for this position (e.g., 1 for Chairperson, multiple for Councilor)
  minVotesRequired Int          @default(0) // Min number of selections (usually 0, meaning voter can skip)
  order            Int // For display sequence on ballot

  electionId String
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade) // Each position belongs to an election period

  candidates Candidate[] // Candidates running for this position

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  VoteCast  VoteCast[]

  @@unique([electionId, name, college]) // A position name should be unique within an election for a specific college (or for USC if college is null)
}

model Partylist {
  id       String  @id @default(cuid())
  name     String
  acronym  String?
  logoUrl  String? // URL to the party list's logo
  platform String? // General platform of the party list

  electionId String
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade) // Each partylist is for a specific election period

  type    PositionType // USC or CSC (use the same enum as Position)
  college College? // Required if type is CSC, null if USC

  candidates Candidate[] // Candidates belonging to this partylist

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([electionId, name, type, college]) // Partylist name should be unique within an election
}

model Candidate {
  id String @id @default(cuid())
  firstName      String
  lastName       String
  middleName     String?
  nickname       String?
  photoUrl       String? // URL to the candidate's photo
  bio            String? // Short biography
  platformPoints String[] @default([]) // Array of strings for platform points

  isIndependent Boolean @default(false) // True if not affiliated with any partylist for this election

  electionId String // Which election period this candidacy is for
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)

  positionId String // The position they are running for
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  partylistId String? // Optional: if affiliated with a partylist
  partylist   Partylist? @relation(fields: [partylistId], references: [id], onDelete: SetNull) // SetNull so if partylist is deleted, candidate becomes independent (or Restrict)

  // For CSC candidates, their college scope. Often derivable from their Position.
  // If position.type is CSC and position.college is set, this candidate is for that college.
  // If position.type is USC, this candidate is for USC.
  votesReceived Int @default(0) // For tallying (can be calculated or stored) - might be better in a separate VoteTally model later

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A candidate (student) can run for one position in one election.
  // If linking to Student model and a student CAN be a candidate multiple times across different elections:
  // @@unique([studentId, electionId, positionId])
  // If just names, ensure name+position+election is unique:
  // @@unique([firstName, lastName, electionId, positionId]) // This might be too strict if names are common
  VoteCast VoteCast[]

  @@index([partylistId])
  @@index([positionId])
  @@index([electionId])
}

// ... (Student and Election models) ...

model StudentElectionVote {
  id         String   @id @default(cuid())
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  electionId String
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade) // Cascade if election is deleted
  votedAt    DateTime @default(now())

  // Store actual votes (more complex, for later if needed, or keep votes anonymous in a separate table)
  // For now, this model just records *that* a vote was cast.
  // Actual ballot choices would be stored in a `Ballot` or `VoteCast` table, often anonymized from Student.

  @@unique([studentId, electionId]) // Student can vote only once per election
  @@index([electionId])
  @@index([studentId])
}

model SubmittedBallot {
  id          String   @id @default(cuid())
  studentId   String // Could be made optional or linked to an anonymized voter ID later if needed
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Restrict) // Restrict deletion of student if they have a ballot
  electionId  String
  election    Election @relation(fields: [electionId], references: [id], onDelete: Cascade) // If election is deleted, ballots for it are too
  submittedAt DateTime @default(now())

  votesCasted VoteCast[] // Relation to individual votes in this ballot
  // Optional: @@unique([studentId, electionId]) if a student submits only one "ballot object" per election,
  // which is implicitly handled by StudentElectionVote model preventing re-submission.

  @@index([studentId])
  @@index([electionId])
}

model VoteCast {
  id       String          @id @default(cuid())
  ballotId String
  ballot   SubmittedBallot @relation(fields: [ballotId], references: [id], onDelete: Cascade) // If ballot is deleted, its cast votes are too

  positionId String
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade) // Don't delete position if votes are cast for it

  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade) // Don't delete candidate if they received votes

  electionId String // Denormalized for easier querying of all votes in an election without going through ballot
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)

  // No studentId here to help with anonymity of individual choices from the ballot submitter.
  // The link is: Student -> SubmittedBallot -> VoteCast.

  @@index([ballotId])
  @@index([positionId])
  @@index([candidateId])
  @@index([electionId])
}

enum AuditActorType {
  ADMIN
  STUDENT
  SYSTEM // For automated actions
  UNKNOWN // Fallback
}

enum AuditLogStatus {
  SUCCESS
  FAILURE
  PENDING // For multi-step operations if needed
  INFO    // For informational logs
}

model AuditLog {
  id          String    @id @default(cuid())
  timestamp   DateTime  @default(now())

  // Actor performing the action
  actorId     String?   // ID of the admin or student, or null for SYSTEM/UNKNOWN
  actorType   AuditActorType @default(UNKNOWN)
  actorEmail  String?   // Denormalized email for easier display in logs, especially if actorId might be deleted

  // Action details
  actionType  String
  status      AuditLogStatus @default(SUCCESS) // success, failure, info

  // Affected Entity (Optional)
  entityType  String?   // e.g., "Election", "Position", "Candidate", "User"
  entityId    String?   // ID of the primary entity affected by the action

  // Target (Optional, if action is on another user/entity)
  targetUserId String?  // e.g., if an admin resets a student's password
  targetUserEmail String? // Denormalized

  // Additional Information
  details     Json?     // For storing arbitrary details, like changed fields (before/after), parameters, error messages
  ipAddress   String?   // IP address of the request originator

  @@index([timestamp])
  @@index([actorId])
  @@index([actorType])
  @@index([actionType])
  @@index([entityType, entityId])
  @@index([targetUserId])
}

// --- NextAuth.js Prisma Adapter Models ---
// Needed if you use the database session strategy or link accounts (OAuth)
// For Credentials-only with JWT sessions, these might not be strictly required
// But it's good practice to include them for flexibility

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  // user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
